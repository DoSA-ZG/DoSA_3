// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using RPPP_WebApp.ViewModels;

namespace RPPP_WebApp.Model;

public partial class Rppp14Context : DbContext
{
    public Rppp14Context(DbContextOptions<Rppp14Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Contract> Contract { get; set; }

    public virtual DbSet<Crop> Crop { get; set; }

    public virtual DbSet<Harvest> Harvest { get; set; }

    public virtual DbSet<Infrastructure> Infrastructure { get; set; }

    public virtual DbSet<Order> Order { get; set; }

    public virtual DbSet<Passport> Passport { get; set; }

    public virtual DbSet<Person> Person { get; set; }

    public virtual DbSet<PersonAddress> PersonAddress { get; set; }

    public virtual DbSet<PlantingSeason> PlantingSeason { get; set; }

    public virtual DbSet<Plot> Plot { get; set; }

    public virtual DbSet<Recipes> Recipes { get; set; }

    public virtual DbSet<SoilCategory> SoilCategory { get; set; }

    public virtual DbSet<SoilQuality> SoilQuality { get; set; }

    public virtual DbSet<Species> Species { get; set; }

    public virtual DbSet<Status> Status { get; set; }

    public virtual DbSet<Tasks> Task { get; set; }

    public virtual DbSet<TaskStatus> TaskStatus { get; set; }

    public virtual DbSet<TypeContract> TypeContract { get; set; }

    public virtual DbSet<UseCaseInformation> UseCaseInformation { get; set; }

    public virtual DbSet<Variant> Variant { get; set; }

    public virtual DbSet<WorkerType> WorkerType { get; set; }

    public virtual DbSet<Workers> Workers { get; set; }

    

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Contract>(entity =>
        {
            entity.HasKey(e => e.IdContract);

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Contract)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Contract_Person");

            entity.HasOne(d => d.IdTypeContractNavigation).WithMany(p => p.Contract)
                .HasForeignKey(d => d.IdTypeContract)
                .HasConstraintName("FK_Contract_Type Contract");
        });

        modelBuilder.Entity<Crop>(entity =>
        {
            entity.HasKey(e => e.IdCrop);

            entity.Property(e => e.PlantingDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Crop)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Crop_Person");

            entity.HasOne(d => d.IdSpeciesNavigation).WithMany(p => p.Crop)
                .HasForeignKey(d => d.IdSpecies)
                .HasConstraintName("FK_Crop_Species");

            entity.HasOne(d => d.IdStatusNavigation).WithMany(p => p.Crop)
                .HasForeignKey(d => d.IdStatus)
                .HasConstraintName("FK_Status_Crop");

            entity.HasOne(d => d.IdTaskNavigation).WithMany(p => p.Crop)
                .HasForeignKey(d => d.IdTask)
                .HasConstraintName("FK_Crop_Task");
        });

        modelBuilder.Entity<Harvest>(entity =>
        {
            entity.HasKey(e => e.IdHarvest);

            entity.Property(e => e.FromDate)
                .HasColumnType("datetime")
                .HasColumnName("[From Date");
            entity.Property(e => e.ToDate)
                .HasColumnType("datetime")
                .HasColumnName("To Date");

            entity.HasOne(d => d.IdCropNavigation).WithMany(p => p.Harvest)
                .HasForeignKey(d => d.IdCrop)
                .HasConstraintName("FK_Harvest_Crop");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Harvest)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Harvest_Workers");
        });

        modelBuilder.Entity<Infrastructure>(entity =>
        {
            entity.HasKey(e => e.IdInfrastructure);

            entity.Property(e => e.TypeMaterial)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.IdOrder);

            entity.Property(e => e.DateOfOrder).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("money");

            entity.HasOne(d => d.IdHarvestNavigation).WithMany(p => p.Order)
                .HasForeignKey(d => d.IdHarvest)
                .HasConstraintName("FK_Order_Harvest");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Order)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Order_Person");
        });

        modelBuilder.Entity<Passport>(entity =>
        {
            entity.HasKey(e => e.IdPassport);

            entity.Property(e => e.ExpiringDate).HasColumnType("datetime");
            entity.Property(e => e.IssueDate).HasColumnType("datetime");
            entity.Property(e => e.Origin)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdVariantNavigation).WithMany(p => p.Passport)
                .HasForeignKey(d => d.IdVariant)
                .HasConstraintName("FK_Passport_Variant");
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.IdPerson);

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Role)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<PersonAddress>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Place)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdPersonNavigation).WithMany()
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_PersonAddress_Person");
        });

        modelBuilder.Entity<PlantingSeason>(entity =>
        {
            entity.HasKey(e => e.IdSeason);

            entity.ToTable("Planting Season");

            entity.Property(e => e.Season)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Plot>(entity =>
        {
            entity.HasKey(e => e.IdPlot);

            entity.Property(e => e.CommonName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gpslocation)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GPSLocation");

            entity.HasOne(d => d.IdCropNavigation).WithMany(p => p.Plot)
                .HasForeignKey(d => d.IdCrop)
                .HasConstraintName("FK_Plot_Crop");

            entity.HasOne(d => d.IdInfrastructureNavigation).WithMany(p => p.Plot)
                .HasForeignKey(d => d.IdInfrastructure)
                .HasConstraintName("FK_Plot_Infrastructure");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Plot)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Plot_Person");

            entity.HasOne(d => d.IdSoilCategoryNavigation).WithMany(p => p.Plot)
                .HasForeignKey(d => d.IdSoilCategory)
                .HasConstraintName("FK_Plot_Soil Category");

            entity.HasOne(d => d.IdSoilQualityNavigation).WithMany(p => p.Plot)
                .HasForeignKey(d => d.IdSoilQuality)
                .HasConstraintName("FK_Plot_Soil Quality");
        });

        modelBuilder.Entity<Recipes>(entity =>
        {
            entity.HasKey(e => e.IdRecipes);

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdVariantNavigation).WithMany(p => p.Recipes)
                .HasForeignKey(d => d.IdVariant)
                .HasConstraintName("FK_Recipes_Variant");
        });

        modelBuilder.Entity<SoilCategory>(entity =>
        {
            entity.HasKey(e => e.IdSoilCategory);

            entity.ToTable("Soil Category");

            entity.Property(e => e.CategoryName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Category Name");
        });

        modelBuilder.Entity<SoilQuality>(entity =>
        {
            entity.HasKey(e => e.IdSoilQuality);

            entity.ToTable("Soil Quality");

            entity.Property(e => e.Quality)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Species>(entity =>
        {
            entity.HasKey(e => e.IdSpecies);

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.IdStatus);

            entity.Property(e => e.Status1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Status");
        });

        modelBuilder.Entity<Tasks>(entity =>
        {
            entity.HasKey(e => e.IdTask);

            entity.Property(e => e.Task1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Task");

            entity.HasOne(d => d.IdPersonNavigation).WithMany(p => p.Task)
                .HasForeignKey(d => d.IdPerson)
                .HasConstraintName("FK_Task_Workers");

            entity.HasOne(d => d.IdTaskStatusNavigation).WithMany(p => p.Task)
                .HasForeignKey(d => d.IdTaskStatus)
                .HasConstraintName("FK_Task_Task Status");
        });

        modelBuilder.Entity<TaskStatus>(entity =>
        {
            entity.HasKey(e => e.IdTaskStatus);

            entity.ToTable("Task Status");

            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TypeContract>(entity =>
        {
            entity.HasKey(e => e.IdTypeContract);

            entity.ToTable("Type Contract");

            entity.Property(e => e.Type)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<UseCaseInformation>(entity =>
        {
            entity.HasKey(e => e.IdUseCaseInfo);

            entity.ToTable("Use Case Information");

            entity.Property(e => e.Category)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.IdVariantNavigation).WithMany(p => p.UseCaseInformation)
                .HasForeignKey(d => d.IdVariant)
                .HasConstraintName("FK_Use Case Information_Variant");
        });

        modelBuilder.Entity<Variant>(entity =>
        {
            entity.HasKey(e => e.IdVariant);

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.IdSeasonNavigation).WithMany(p => p.Variant)
                .HasForeignKey(d => d.IdSeason)
                .HasConstraintName("FK_Variant_Planting Season");

            entity.HasOne(d => d.IdSpeciesNavigation).WithMany(p => p.Variant)
                .HasForeignKey(d => d.IdSpecies)
                .HasConstraintName("FK_Variant_Species");
        });

        modelBuilder.Entity<WorkerType>(entity =>
        {
            entity.HasKey(e => e.IdWorkerType);

            entity.ToTable("Worker Type");

            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Workers>(entity =>
        {
            entity.HasKey(e => e.IdPerson);

            entity.Property(e => e.IdPerson).ValueGeneratedNever();

            entity.HasOne(d => d.IdPersonNavigation).WithOne(p => p.Workers)
                .HasForeignKey<Workers>(d => d.IdPerson)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Workers_Person1");

            entity.HasOne(d => d.IdWorkerTypeNavigation).WithMany(p => p.Workers)
                .HasForeignKey(d => d.IdWorkerType)
                .HasConstraintName("FK_Workers_Worker Type1");
        });

        modelBuilder.Entity<Workers>()
        .Ignore(w => w.ItemsW);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}